// <auto-generated />
using System;
using Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ElearningDbContext))]
    [Migration("20250323041139_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NationalId" }, "IX_AspNetUsers_NationalId");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Infrastructure.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D71A77BFE4A8E");

                    b.HasIndex("TermId");

                    b.HasIndex(new[] { "CourseCode" }, "UQ__Courses__FC00E00052D14E75")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Infrastructure.Models.CourseMaterial", b =>
                {
                    b.Property<Guid>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MaterialId")
                        .HasName("PK__CourseMa__C50610F7081236FA");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("CourseMaterials");
                });

            modelBuilder.Entity("Infrastructure.Models.CourseSection", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DemonstratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SectionNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SectionId")
                        .HasName("PK__CourseSe__80EF087250D7D786");

                    b.HasIndex("DemonstratorId");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseSections_CourseId");

                    b.ToTable("CourseSections");
                });

            modelBuilder.Entity("Infrastructure.Models.Level", b =>
                {
                    b.Property<Guid>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LevelId")
                        .HasName("PK__Levels__09F03C26A37B3ABC");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Infrastructure.Models.Quiz", b =>
                {
                    b.Property<Guid>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalPoints")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("QuizId")
                        .HasName("PK__Quizzes__8B42AE8EE2C3570B");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Infrastructure.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeneratedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReportFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReportId")
                        .HasName("PK__Reports__D5BD48058BF4F1E6");

                    b.HasIndex("AdminId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentCourse", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Degree")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("GradePoints")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<bool>("PassStatus")
                        .HasColumnType("bit");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "CourseId")
                        .HasName("PK__StudentC__5E57FC831903C394");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectionId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentCourses_StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentQuizSubmission", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Feedback")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SubmissionFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SubmissionId")
                        .HasName("PK__StudentQ__449EE125C6D706FE");

                    b.HasIndex("QuizId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentQuizSubmissions_StudentId");

                    b.ToTable("StudentQuizSubmissions");
                });

            modelBuilder.Entity("Infrastructure.Models.Term", b =>
                {
                    b.Property<Guid>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TermName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TermId")
                        .HasName("PK__Terms__410A21A57568D433");

                    b.HasIndex("LevelId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("ProfessorCourse", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfessorId", "CourseId")
                        .HasName("PK__Professo__FC918E534367786E");

                    b.HasIndex("CourseId");

                    b.HasIndex(new[] { "ProfessorId" }, "IX_ProfessorCourses_ProfessorId");

                    b.ToTable("ProfessorCourses", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Infrastructure.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Infrastructure.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Infrastructure.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Infrastructure.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Infrastructure.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Course", b =>
                {
                    b.HasOne("Infrastructure.Models.Term", "Term")
                        .WithMany("Courses")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__Courses__TermId__797309D9");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Infrastructure.Models.CourseMaterial", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany("CourseMaterials")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseMat__Cours__0C85DE4D");

                    b.HasOne("Infrastructure.Models.AspNetUser", "Professor")
                        .WithMany("CourseMaterials")
                        .HasForeignKey("ProfessorId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseMat__Profe__0D7A0286");

                    b.Navigation("Course");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Infrastructure.Models.CourseSection", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany("CourseSections")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseSec__Cours__7D439ABD");

                    b.HasOne("Infrastructure.Models.AspNetUser", "Demonstrator")
                        .WithMany("CourseSections")
                        .HasForeignKey("DemonstratorId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseSec__Demon__7E37BEF6");

                    b.Navigation("Course");

                    b.Navigation("Demonstrator");
                });

            modelBuilder.Entity("Infrastructure.Models.Quiz", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany("Quizzes")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Quizzes__CourseI__114A936A");

                    b.HasOne("Infrastructure.Models.AspNetUser", "Professor")
                        .WithMany("Quizzes")
                        .HasForeignKey("ProfessorId")
                        .IsRequired()
                        .HasConstraintName("FK__Quizzes__Profess__123EB7A3");

                    b.Navigation("Course");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Infrastructure.Models.Report", b =>
                {
                    b.HasOne("Infrastructure.Models.AspNetUser", "Admin")
                        .WithMany("Reports")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK__Reports__AdminId__1CBC4616");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentCourse", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentCo__Cours__06CD04F7");

                    b.HasOne("Infrastructure.Models.CourseSection", "Section")
                        .WithMany("StudentCourses")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentCo__Secti__07C12930");

                    b.HasOne("Infrastructure.Models.AspNetUser", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentCo__Stude__05D8E0BE");

                    b.Navigation("Course");

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentQuizSubmission", b =>
                {
                    b.HasOne("Infrastructure.Models.Quiz", "Quiz")
                        .WithMany("StudentQuizSubmissions")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentQu__QuizI__17036CC0");

                    b.HasOne("Infrastructure.Models.AspNetUser", "Student")
                        .WithMany("StudentQuizSubmissions")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentQu__Stude__17F790F9");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Models.Term", b =>
                {
                    b.HasOne("Infrastructure.Models.Level", "Level")
                        .WithMany("Terms")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK__Terms__LevelId__73BA3083");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("ProfessorCourse", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Professor__Cours__02084FDA");

                    b.HasOne("Infrastructure.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .IsRequired()
                        .HasConstraintName("FK__Professor__Profe__01142BA1");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Infrastructure.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("CourseMaterials");

                    b.Navigation("CourseSections");

                    b.Navigation("Quizzes");

                    b.Navigation("Reports");

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentQuizSubmissions");
                });

            modelBuilder.Entity("Infrastructure.Models.Course", b =>
                {
                    b.Navigation("CourseMaterials");

                    b.Navigation("CourseSections");

                    b.Navigation("Quizzes");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Infrastructure.Models.CourseSection", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Infrastructure.Models.Level", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Infrastructure.Models.Quiz", b =>
                {
                    b.Navigation("StudentQuizSubmissions");
                });

            modelBuilder.Entity("Infrastructure.Models.Term", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
